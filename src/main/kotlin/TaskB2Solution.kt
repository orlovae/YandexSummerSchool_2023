/**
Есть 10 вертикальных палочек, пронумерованных от 0 до 9 и n колец трёх цветов красного «R», зеленого «G»
и голубого «B», которые на надеты на палочки. Ваша задача по строке s, кодирующей, где находится каждое из
колец определить количество палочек, на которое надеты кольца всех трёх цветов.
Строка представляет из себя последовательность чётной длины, где на нечётных позициях (1, 3, 5 и т.д.) написан
цвет кольца, а на чётных позициях (2, 4, 6 и т.д.) — номер палочки, на которую надето кольцо. Таким образом,
кольцо номер i имеет цвет s(2i−1) и находится на палочке номер s(2i).

Например, строка «R2G1R1B2G2» кодирует 5 колец:
Первое кольцо имеет красный цвет и находится на палочке 2;
Второе кольцо имеет зеленый цвет и находится на палочке 1;
Третье кольцо имеет красный цвет и находится на палочке 1;
Четвертое кольцо имеет синий цвет и находится на палочке 2;
Пятое кольцо имеет зеленый цвет и находится на палочке 2;

Формат ввода
Первая строка входных данных  — это непустая строка четной длины s(1≤|s|≤1000), состоящая из символов «R», «G» или
«B» и цифр от 0 до 9.

Формат вывода
Выведите единственное целое число — количество палочек, на которых имеются кольца всех трёх цветов.
Пример 1
Ввод
R2G1R1B2G2
Вывод
1
Пример 2
Ввод
R9G1B0
Вывод
0
 */
class TaskB2Solution {
    private val scan = java.util.Scanner(System.`in`)
    private val inputString = scan.nextLine()

    init {
        print(
            getCountStick(inputString)
        )
    }

    private fun getCountStick(string: String): Int {
        val array = arrayOfNulls<MutableSet<Char>>(10)
        var answer = 0
        for (i in 1..string.lastIndex step 2) {
            val key = string[i].digitToInt()
            val value = string[i - 1]

            if (array[key] != null) {
                array[key]?.add(value)
            } else {
                array[key] = mutableSetOf(value)
            }

        }

        array.forEach {
            if (it?.size != null && it.size % 3 == 0) {
                answer++
            }
        }
        return answer
    }
}