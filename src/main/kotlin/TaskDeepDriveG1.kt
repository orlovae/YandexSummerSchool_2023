/**
Гарри и Гермиона собрались лепить снеговика. Они договорились, что снеговик будет состоять из n частей. Но вот
незадача — Гермиона подает Гарри снежные шары не в порядке убывания размеров, а в случайном порядке. Снежные шары
имеют размер от 1 до n. Гермиона не любит лепить снежные комья, поэтому подает Гарри всего один снежный шар в день.
Гарри не всегда может сразу же пристроить снежный ком к снеговику, поэтому иногда приходится откладывать ком до
тех пор, пока Гермиона не скатает все комья больше этого.
Напишите программу, которая будет моделировать деятельность Гарри по созданию снеговика.

Формат ввода
В первой строке находится одно натуральное число n (1≤n≤100_000) — общее количество комьев, из которых Гарри и
Гермиона будут лепить снеговика. Во второй строке находится n чисел, i-е из которых равно размеру кома, скатанному
Гермионой в i-й день. Все размеры — различные натуральные числа от 1 до n.

Формат вывода
Выведите в выходной файл n строк. На i-й из них выведите размеры всех комьев, которые будут установлены на снеговике
в i-й день в том порядке, в котором они будут установлены. Если в какой-то день не будет установлен ни один снежный
ком, оставьте соответствующую строку выходного файла пустой.
Пример 1
Ввод
3
3 1 2
Вывод
3

2 1
Пример 2
Ввод
5
4 5 1 2 3
Вывод

5 4


3 2 1
 */
class TaskDeepDriveG1 {
    private val sizeBallList = readln().toInt()
    private val ballList = readln().split(" ").map { it.toInt() }.toMutableList()

    init {
        val sortedList = ballList.sortedDescending().toMutableList()
        val buffer = mutableListOf<Int>()
        var i = 0
        while (i <= ballList.lastIndex) {
            if (sortedList[i] == ballList[i]) {
                println("${ballList[i]}")
            } else {
                while (i < ballList.lastIndex && ballList[i] < ballList[i + 1]) {
                    println()
                    buffer.add(ballList[i])
                    i++
                }

                if (buffer.isNotEmpty()) {
                    print("${ballList[i]} ")
                    buffer.sortedDescending().forEach {
                        print("$it ")
                    }
                    println()
                } else {
                    println()
                }
                buffer.clear()
            }
            i++
        }
    }
}